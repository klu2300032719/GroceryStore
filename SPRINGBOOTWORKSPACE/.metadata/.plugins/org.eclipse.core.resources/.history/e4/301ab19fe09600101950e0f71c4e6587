package com.klef.fsd.springboot.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.klef.fsd.springboot.model.Product;
import com.klef.fsd.springboot.model.User;
import com.klef.fsd.springboot.repository.UserRepository;
import com.klef.fsd.springboot.service.ProductService;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/products")
public class ProductController {

    @Autowired
    private ProductService productService;

    @Autowired
    private UserRepository userRepository;

    // Add product (seller only)
    @PostMapping("/add/{username}")
    public ResponseEntity<?> addProduct(@PathVariable String username, @RequestBody Product product) {
        Optional<User> sellerOpt = userRepository.findByUsername(username);
        if (sellerOpt.isPresent()) {
            User seller = sellerOpt.get();
            product.setSeller(seller);
            return ResponseEntity.ok(productService.addProduct(product));
        }
        return ResponseEntity.badRequest().body("Seller not found");
    }

    // Update product
    @PutMapping("/update/{id}")
    public ResponseEntity<?> updateProduct(@PathVariable Long id, @RequestBody Product product) {
        Product existing = productService.getProductById(id);
        if (existing != null) {
            product.setId(id);
            return ResponseEntity.ok(productService.updateProduct(product));
        }
        return ResponseEntity.badRequest().body("Product not found");
    }

    // Delete product
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<?> deleteProduct(@PathVariable Long id) {
        productService.deleteProduct(id);
        return ResponseEntity.ok("Product deleted successfully");
    }

    // Get all products
    @GetMapping("/")
    public ResponseEntity<List<Product>> getAllProducts() {
        return ResponseEntity.ok(productService.getAllProducts());
    }

    // Get product by id
    @GetMapping("/{id}")
    public ResponseEntity<?> getProductById(@PathVariable Long id) {
        Product product = productService.getProductById(id);
        if (product != null) {
            return ResponseEntity.ok(product);
        }
        return ResponseEntity.badRequest().body("Product not found");
    }

    // Get products by category
    @GetMapping("/category/{category}")
    public ResponseEntity<List<Product>> getProductsByCategory(@PathVariable String category) {
        return ResponseEntity.ok(productService.getProductsByCategory(category));
    }

    // Get products by seller
    @GetMapping("/seller/{username}")
    public ResponseEntity<?> getProductsBySeller(@PathVariable String username) {
        Optional<User> sellerOpt = userRepository.findByUsername(username);
        if (sellerOpt.isPresent()) {
            return ResponseEntity.ok(productService.getProductsBySeller(sellerOpt.get()));
        }
        return ResponseEntity.badRequest().body("Seller not found");
    }
}

